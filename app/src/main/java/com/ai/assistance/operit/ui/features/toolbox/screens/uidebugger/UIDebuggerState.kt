package com.ai.assistance.operit.ui.features.toolbox.screens.uidebugger

import android.graphics.Rect
import com.ai.assistance.operit.core.tools.automatic.config.AutomationPackageInfo
import com.ai.assistance.operit.core.tools.automatic.UINode
import com.ai.assistance.operit.core.tools.automatic.UIFunction
import com.ai.assistance.operit.core.tools.automatic.UIRouteConfig
import com.ai.assistance.operit.core.tools.automatic.UIEdgeDefinition
import com.ai.assistance.operit.core.tools.automatic.UINodeType
import com.ai.assistance.operit.core.tools.automatic.UIOperation
import com.ai.assistance.operit.core.tools.system.action.ActionListener

enum class UIDebuggerViewMode {
    NODES, FUNCTIONS
}

enum class ImportExportMode {
    IMPORT, EXPORT
}

enum class EditMode {
    NONE, ADD, EDIT
}

enum class EditTarget {
    NODE, EDGE, FUNCTION
}

/** UI调试工具的状态类 */
data class UIDebuggerState(
    val elements: List<UIElement> = emptyList(),
    val selectedElementId: String? = null,
    val showActionFeedback: Boolean = false,
    val actionFeedbackMessage: String = "",
    val errorMessage: String? = null,
    val currentAnalyzedActivityName: String? = null,
    val currentAnalyzedPackageName: String? = null,
    // JSON配置相关状态
    val builtInPackages: List<AutomationPackageInfo> = emptyList(),
    val externalPackages: List<AutomationPackageInfo> = emptyList(),
    val selectedPackage: AutomationPackageInfo? = null,
    val packageConfig: UIRouteConfig? = null, // Store the whole config
    val selectedNodeName: String? = null, // Name of the selected node
    val currentViewMode: UIDebuggerViewMode = UIDebuggerViewMode.NODES,
    val packageNodes: List<UINode> = emptyList(),
    val showPackageDialog: Boolean = false,
    val showImportExportDialog: Boolean = false,
    val importExportMode: ImportExportMode = ImportExportMode.IMPORT,
    val isLoadingPackages: Boolean = false,
    // 操作详情相关状态
    val showOperationDetailsDialog: Boolean = false,
    val selectedEdgeForDetails: UIEdgeDefinition? = null,
    val selectedFromNodeForDetails: String? = null,
    // 功能详情相关状态
    val showFunctionDetailsDialog: Boolean = false,
    val selectedFunctionForDetails: UIFunction? = null,
    // 编辑相关状态
    val editMode: EditMode = EditMode.NONE,
    val editTarget: EditTarget = EditTarget.NODE,
    val showEditDialog: Boolean = false,
    val editingNode: UINode? = null,
    val editingEdge: EditingEdge? = null,
    val editingFunction: UIFunction? = null,
    val showCreatePackageDialog: Boolean = false,
    val selectedPackageForExport: AutomationPackageInfo? = null,
    val isConfigModified: Boolean = false,
    // Activity监听相关状态
    val isActivityListening: Boolean = false,
    val activityEvents: List<ActionListener.ActionEvent> = emptyList(),
    val showActivityMonitor: Boolean = false,
    val currentActivityName: String? = null,
    // 自动构建相关状态
    val autoGraphBuilding: Boolean = false,
    val detectedCurrentPackageName: String? = null,
    val lastActivityName: String? = null,
    val autoGeneratedNodes: Int = 0,
    val autoGeneratedEdges: Int = 0,
    val lastClickEvent: ActionListener.ActionEvent? = null
)

/** 正在编辑的边信息 */
data class EditingEdge(
    val fromNodeName: String,
    val originalEdge: UIEdgeDefinition? = null, // null表示新增
    val toNodeName: String = "",
    val operations: List<UIOperation> = emptyList(),
    val validation: UIOperation.ValidateElement? = null,
    val conditions: Set<String> = emptySet(),
    val weight: Double = 1.0
)

/** UI元素数据模型 */
data class UIElement(
    val id: String,
    val className: String,
    val resourceId: String? = null,
    val contentDesc: String? = null,
    val text: String = "",
    val bounds: Rect? = null,
    val isClickable: Boolean = false,
    val activityName: String? = null,
    val packageName: String? = null
) {
    val typeDescription: String
        get() = when {
            className.contains("Button", ignoreCase = true) -> "按钮"
            className.contains("Text", ignoreCase = true) -> "文本"
            className.contains("Edit", ignoreCase = true) -> "输入框"
            className.contains("Image", ignoreCase = true) -> "图片"
            className.contains("View", ignoreCase = true) -> "视图"
            else -> "UI元素"
        }

    fun getFullDetails(): String {
        return buildString {
            append("类名: $className\n")
            if (packageName != null) append("包名: $packageName\n")
            if (activityName != null) append("Activity: $activityName\n")
            if (resourceId != null) append("资源ID: $resourceId\n")
            if (contentDesc != null) append("内容描述: $contentDesc\n")
            if (text.isNotEmpty()) append("文本: $text\n")
            if (bounds != null)
                append("边界: [${bounds.left}, ${bounds.top}, ${bounds.right}, ${bounds.bottom}]\n")
            append("可点击: ${if (isClickable) "是" else "否"}")
        }
    }
}

/** UI元素操作类型 */
enum class UIElementAction {
    CLICK,
    HIGHLIGHT,
    INSPECT
}
